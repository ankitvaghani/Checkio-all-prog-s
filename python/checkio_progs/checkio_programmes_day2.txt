#between_markers

===============================================================================================

import re
def between_markers(text: str, begin: str, end: str) -> str:
    """
        returns substring between two given markers
    """
    # your code here
  
    start = text.find(begin) + len(begin) if begin in text else None

    stop = text.find(end) if end in text else None
    
    return text[start:stop]
    #p = re.search(text, begin)
    #print(p)
    #l = list(text)
    #for p in text:
        #print(p)
    #a = text.index(begin)       
    #print (a)
    
    '''b = list(begin);
    e = list(end);print(e)
    s = list(text);print(s)
    ''' #print(text[b:e])
    #if begin in text:
     #   print("find")
    
    '''
    lenb = len(begin)#;print(lenb)
    lene = len(end)#;print(lene)
    lens = len(text)#;print(lens)
    m = re.search("("+begin+")", text);print(m)
    m1 =re.search("("+end+")", text);print(m1)
    
    #if begin in text:
    if m and m1:
    # This is not reached.
        print("match b:", m.group(1))
        t = text.find(begin)+lenb
        t1 = text.find(end)
        return text[t:t1]
    else:
        print("not match b:", m.group(1))
        t = text.find(begin)+1;
        #t1 = text.find(end)
        
    if end in text:      
        if m1:
            print("match e:", m1.group(1))
            #t = text.find(begin)+lenb
            t1 = text.find(end)
    else:
        print("not match e:", m1.group(1))
       # t = text.find(begin)-lenb
        t1 = lens-1#;print(t1)
   
    print(end);print(begin) 
    print(t)
    print(t1)
    return text[t:t1]
'''
'''
    word1=text
    sign1=begin
    sign2=end
    
    sign1len=len(sign1)
    index1=word1.find(sign1)
    index2=word1.find(sign2)
   # print(index1)
   # print(index2)
    
    start=index1+sign1len
    end=index2
    
   # print(sign1len)
    if index1 == -1 and index2 == -1: 
        return word1
    elif index2 ==  -1:
        return word1[start:]
    elif index1 == -1:
        return word1[:end]
    else:
        return word1[start:end]
'''




if __name__ == '__main__':
    print('Example:')
    print(between_markers('What is >apple<', '>', '<'))

    # These "asserts" are used for self-checking and not for testing
    assert between_markers('What is >apple<', '>', '<') == "apple", "One sym"
    assert between_markers("<head><title>My new site</title></head>",
                           "<title>", "</title>") == "My new site", "HTML"
    assert between_markers('No[/b] hi', '[b]', '[/b]') == 'No', 'No opened'
    assert between_markers('No [b]hi', '[b]', '[/b]') == 'hi', 'No close'
    assert between_markers('No hi', '[b]', '[/b]') == 'No hi', 'No markers at all'
    assert between_markers('No <hi>', '>', '<') == '', 'Wrong direction'
    print('Wow, you are doing pretty good. Time to check it!')



#best_stock

===========================================================================================

def best_stock(data):
    # your code here
     #return max(data, key=data.get)
   
    max_price = max(data.values())

    for key, value in data.items():

        if value == max_price:

            return key



if __name__ == '__main__':
    print("Example:")
    print(best_stock({
        'CAC': 10.0,
        'ATX': 390.2,
        'WIG': 1.2
    }))

    # These "asserts" are used for self-checking and not for an auto-testing
    assert best_stock({
        'CAC': 10.0,
        'ATX': 390.2,
        'WIG': 1.2
    }) == 'ATX', "First"
    assert best_stock({
        'CAC': 91.1,
        'ATX': 1.01,
        'TASI': 120.9
    }) == 'TASI', "Second"
    print("Coding complete? Click 'Check' to earn cool rewards!")


#popular_word

===================================================================================


import re
def popular_words(text, words):
    # your code here
    
   # print(text);print(words)
    #lp = text.lower()

    list1 = {}

    for word in words:

        list1[word] = text.lower().count(word)
        #print(list1)
    return list1
   

if __name__ == '__main__':
    print("Example:")
    print(popular_words('''
When I was One,
I had just begun.
When I was Two,
I was nearly new.
''', ['i', 'was', 'three']))

    # These "asserts" are used for self-checking and not for an auto-testing
    assert popular_words('''
When I was One,
I had just begun.
When I was Two,
I was nearly new.
''', ['i', 'was', 'three']) == {
        'i': 4,
        'was': 3,
        'three': 0
    }
    print("Coding complete? Click 'Check' to earn cool rewards!")



